image: debian:testing

stages:
  - prepare
  - dependencies
  - siril

variables:
  GIT_DEPTH: "1"
  INSTALL_DIR: "_install"
  INSTALL_PREFIX: "${CI_PROJECT_DIR}/${INSTALL_DIR}"
  APT_CACHE: "${CI_PROJECT_DIR}/apt-cache"

## prepare docker images ##

build-image:
  stage: prepare
  variables:
    GIT_STRATEGY: none
  cache: {}
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - echo "FROM debian:testing" > Dockerfile
    - echo "RUN apt-get update" >> Dockerfile
    - echo "RUN apt-get install -y --no-install-recommends \\" >> Dockerfile
    - echo "at-spi2-core build-essential desktop-file-utils cmake hicolor-icon-theme git intltool libexiv2-dev libgtk-3-dev libcfitsio-dev libfftw3-dev libgsl-dev libconfig-dev libopencv-dev librsvg2-dev libraw-dev libffms2-dev libtiff-dev libjpeg-dev libheif-dev libpng-dev libavformat-dev libavutil-dev libavcodec-dev libswscale-dev libswresample-dev libcurl4-gnutls-dev python3 ninja-build meson" >> Dockerfile

    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:build-debian-latest --cache=true --cache-ttl=120h


build-image-win64:
  stage: prepare
  variables:
    GIT_STRATEGY: none
  cache: {}
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - echo "FROM debian:testing" > Dockerfile
    - echo "RUN apt-get update" >> Dockerfile
    - echo "RUN apt-get install -y --no-install-recommends \\" >> Dockerfile
    - echo "build-essential cmake cpio g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64 git intltool libglib2.0-bin meson pkg-config python3 python3-distutils python3-docutils python3-pip rpm xsltproc" >> Dockerfile
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:build-win64-latest --cache=true --cache-ttl=120h

## GNU/Linux 64-bit CIs ##

deps-debian/testing:
  stage: dependencies
  image: $CI_REGISTRY_IMAGE:build-debian-latest
  cache:
    paths:
    - apt-cache
  artifacts:
    expire_in: 2 hours
    when: always
    paths:
    - "${INSTALL_DIR}"
  before_script:
    - export PKG_CONFIG_PATH="${INSTALL_PREFIX}/lib/pkgconfig"
    - export PKG_CONFIG_PATH="${INSTALL_PREFIX}/lib/`gcc -print-multiarch`/pkgconfig/:$PKG_CONFIG_PATH"
    - export LD_LIBRARY_PATH="${INSTALL_PREFIX}/lib:${LD_LIBRARY_PATH}"
    - export LD_LIBRARY_PATH="${INSTALL_PREFIX}/lib/`gcc -print-multiarch`:$LD_LIBRARY_PATH"
    - export XDG_DATA_DIRS="${INSTALL_PREFIX}/share:/usr/local/share:/usr/share"
  script:
    - echo ""
  needs: ["build-image"]


.siril-debian/testing-base:
  stage: siril
  image: $CI_REGISTRY_IMAGE:build-debian-latest
  dependencies:
    - deps-debian/testing
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  cache:
    paths:
    - apt-cache
  artifacts:
    expire_in: 1 days
    when: always
    name: "app-build-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    paths:
    - _build
  before_script:
    - export PKG_CONFIG_PATH="${INSTALL_PREFIX}/lib/pkgconfig:${INSTALL_PREFIX}/share/pkgconfig"
    - export PKG_CONFIG_PATH="${INSTALL_PREFIX}/lib/`gcc -print-multiarch`/pkgconfig/:$PKG_CONFIG_PATH"
    - export PKG_CONFIG_PATH="${INSTALL_PREFIX}/share/`gcc -print-multiarch`/pkgconfig/:$PKG_CONFIG_PATH"
    - export LD_LIBRARY_PATH="${INSTALL_PREFIX}/lib:${LD_LIBRARY_PATH}"
    - export LD_LIBRARY_PATH="${INSTALL_PREFIX}/lib/`gcc -print-multiarch`:$LD_LIBRARY_PATH"
    - export XDG_DATA_DIRS="${INSTALL_PREFIX}/share:/usr/local/share:/usr/share"
    - export PATH="${INSTALL_PREFIX}/bin:$PATH"
  needs: ["deps-debian/testing"]

siril-debian/testing-autotools:
  extends: .siril-debian/testing-base
  script:
    - NOCONFIGURE=1 ./autogen.sh
    - mkdir _build && cd _build
    - ../configure --prefix=${INSTALL_PREFIX}
    - make -j "$(nproc)" all install

siril-debian/testing-meson:
  extends: .siril-debian/testing-base
  script:
    - meson _build
      --prefix="${INSTALL_PREFIX}"
    - ninja -C _build
    - ninja -C _build test

## WINDOWS 64-bit CI ##

deps-win64:
  stage: dependencies
  image: $CI_REGISTRY_IMAGE:build-win64-latest
  variables:
    XDG_CACHE_HOME: "$CI_PROJECT_DIR/.cache/"
    XDG_DATA_HOME:  "$CI_PROJECT_DIR/.local/share/"
  cache:
    paths:
    - .cache/crossroad/
    - apt-cache
  before_script:
    - git clone --depth=${GIT_DEPTH} git://git.tuxfamily.org/gitroot/crossroad/crossroad.git
    - cd crossroad
    - ./setup.py install --prefix=`pwd`/../.local
    - cd ..
    - pip3 install zstandard
  script:
    - export PATH="`pwd`/.local/bin:$PATH"
    - crossroad w64 siril --run="build/windows/crossbuild-gitlab-ci/build-deps.sh"
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    when: always
    expire_in: 2 hours
    paths:
      - .local/
  needs: ["build-image-win64"]

siril-win64/testing-meson:
  stage: siril
  image: $CI_REGISTRY_IMAGE:build-win64-latest
  dependencies:
    - deps-win64
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    XDG_CACHE_HOME: "$CI_PROJECT_DIR/.cache/"
    XDG_DATA_HOME:  "$CI_PROJECT_DIR/.local/share/"
  cache:
    paths:
    - .cache/crossroad/
    - apt-cache
  script:
    - update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
    - update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
    - export PATH="`pwd`/.local/bin:$PATH"
    - mkdir subprojects/librtprocess/_build && cd subprojects/librtprocess/_build
    - echo 'crossroad cmake .. && make && make install' | crossroad w64 siril --run="-"
    - cd ../../.. 
    - mkdir _build && cd _build
    - echo 'crossroad meson .. && ninja install && cp ../build/windows/crossbuild-gitlab-ci/siril-wrapper.cmd $CROSSROAD_PREFIX/bin/ && cp -fr $CROSSROAD_PREFIX/ ../siril-prefix/' | crossroad w64 siril --run="-"
  needs: ["deps-win64"]
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    when: always
    expire_in: 1 day
    paths:
      - _build/
      - siril-prefix/

siril-win64/testing-autotools:
  stage: siril
  image: $CI_REGISTRY_IMAGE:build-win64-latest
  dependencies:
    - deps-win64
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    XDG_CACHE_HOME: "$CI_PROJECT_DIR/.cache/"
    XDG_DATA_HOME:  "$CI_PROJECT_DIR/.local/share/"
  cache:
    paths:
    - .cache/crossroad/
    - apt-cache
  script:
    - update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
    - update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
    - export PATH="`pwd`/.local/bin:$PATH"
    - mkdir subprojects/librtprocess/_build && cd subprojects/librtprocess/_build
    - echo 'crossroad cmake .. && make && make install' | crossroad w64 siril --run="-"
    - cd ../../.. 
    - mkdir _build && cd _build
    - echo 'crossroad ../configure .. && make install && cp ../build/windows/crossbuild-gitlab-ci/siril-wrapper.cmd $CROSSROAD_PREFIX/bin/ && cp -fr $CROSSROAD_PREFIX/ ../siril-prefix/' | crossroad w64 siril --run="-"
  needs: ["deps-win64"]
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    when: always
    expire_in: 1 day
    paths:
      - _build/
      - siril-prefix/

flatpak:
  # Update the image URL whenever the runtime version in the flatpak manifest is changed
  image: 'registry.gitlab.gnome.org/gnome/gnome-runtime-images/gnome:3.36'
  stage: 'siril'
  variables:
    MANIFEST_PATH: "build/flatpak/org.free_astro.siril.json"
    FLATPAK_MODULE: "siril"
    APP_ID: "org.free_astro.siril"
    RUNTIME_REPO: "https://flathub.org/repo/flathub.flatpakrepo"
    BUNDLE: "org.free_astro.siril.flatpak"
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - flatpak-builder --stop-at=${FLATPAK_MODULE} flatpak_app ${MANIFEST_PATH} 1>/dev/null
    # Make sure to keep this in sync with the Flatpak manifest, all arguments
    # are passed except the config-args because we build it ourselves
    - flatpak build flatpak_app ./autogen.sh --prefix=/app
    - flatpak build flatpak_app make
    - flatpak build flatpak_app make install
    - flatpak-builder --finish-only --repo=repo ${BRANCH:+--default-branch=$BRANCH} flatpak_app ${MANIFEST_PATH}
    # TODO: Run automatic tests inside the Flatpak env 
    # - >
    #   xvfb-run -a -s "-screen 0 1024x768x24"
    #   flatpak build
    #   --env=LANG=C.UTF-8
    #   --env=NO_AT_BRIDGE=1
    #   ${TEST_BUILD_ARGS}
    #   flatpak_app
    #   dbus-run-session
    #   meson test -C _build --no-stdsplit --print-errorlogs ${TEST_RUN_ARGS}

    # Generate a Flatpak bundle
    - flatpak build-bundle repo ${BUNDLE} --runtime-repo=${RUNTIME_REPO} ${APP_ID} ${BRANCH}
  artifacts:
    name: 'Flatpak artifacts'
    expose_as: 'Get Flatpak bundle here'
    when: 'always'
    paths:
      - "${BUNDLE}"
      - 'repo/'
    expire_in: 1 week
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - '.flatpak-builder/downloads'
      - '.flatpak-builder/git'
  needs: []
